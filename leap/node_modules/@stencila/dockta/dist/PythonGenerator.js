"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const PackageGenerator_1 = __importDefault(require("./PackageGenerator"));
const PythonSystemPackageLookup_1 = __importDefault(require("./PythonSystemPackageLookup"));
const GENERATED_REQUIREMENTS_FILE = '.requirements.txt';
/**
 * A Dockerfile generator for Python packages
 */
class PythonGenerator extends PackageGenerator_1.default {
    // Methods that override those in `Generator`
    constructor(urlFetcher, pkg, folder, pythonMajorVersion = 3) {
        super(urlFetcher, pkg, folder);
        this.pythonMajorVersion = pythonMajorVersion;
        this.systemPackageLookup = PythonSystemPackageLookup_1.default.fromFile(path_1.default.join(__dirname, 'PythonSystemDependencies.json'));
    }
    /**
     * Return the `pythonMajorVersion` (as string) if it is not 2, otherwise return an empty string (if it is 2). This is
     * for appending to things like pip{3} or python{3}.
     */
    pythonVersionSuffix() {
        return this.pythonMajorVersion === 2 ? '' : `${this.pythonMajorVersion}`;
    }
    /**
     * Check if this Generator's package applies (if it is Python).
     */
    applies() {
        return this.package.runtimePlatform === 'Python';
    }
    /**
     * Generate a list of system (apt) packages by looking up with `this.systemPackageLookup`.
     */
    aptPackages(sysVersion) {
        let aptRequirements = [];
        this.package.softwareRequirements.map((requirement) => {
            aptRequirements = aptRequirements.concat(this.systemPackageLookup.lookupSystemPackage(requirement.name, this.pythonMajorVersion, 'deb', sysVersion));
        });
        const dedupedRequirements = [];
        aptRequirements.map((aptRequirement) => {
            if (!dedupedRequirements.includes(aptRequirement)) {
                dedupedRequirements.push(aptRequirement);
            }
        });
        return [
            `python${this.pythonVersionSuffix()}`,
            `python${this.pythonVersionSuffix()}-pip`,
        ].concat(dedupedRequirements);
    }
    /**
     * Build the contents of a `requirements.txt` file by joining the Python package name to its version specifier.
     */
    generateRequirementsContent() {
        if (!this.package.softwareRequirements) {
            return '';
        }
        return this.filterPackages('Python')
            .map((requirement) => `${requirement.name}${requirement.version}`)
            .join('\n');
    }
    /**
     * Get the pip command to install the Stencila package
     */
    stencilaInstall(sysVersion) {
        return `pip${this.pythonVersionSuffix()} install --no-cache-dir https://github.com/stencila/py/archive/91a05a139ac120a89fc001d9d267989f062ad374.zip \\
 && python${this.pythonVersionSuffix()} -m stencila register`;
    }
    /**
     * Write out the generated requirements content to `GENERATED_REQUIREMENTS_FILE` or none exists, just instruct the
     * copy of a `requirements.txt` file as part of the Dockerfile. If that does not exist, then no COPY should be done.
     */
    installFiles(sysVersion) {
        const requirementsContent = this.generateRequirementsContent();
        if (requirementsContent !== '') {
            this.write(GENERATED_REQUIREMENTS_FILE, requirementsContent);
            return [[GENERATED_REQUIREMENTS_FILE, 'requirements.txt']];
        }
        if (this.exists('requirements.txt')) {
            return [['requirements.txt', 'requirements.txt']];
        }
        return [];
    }
    /**
     * Generate the right pip command to install the requirements, appends the correct Python major version to `pip`.
     */
    installCommand(sysVersion) {
        return `pip${this.pythonVersionSuffix()} install --requirement requirements.txt`;
    }
    /**
     * The files to copy into the Docker image
     *
     * Copies all `*.py` files to the container
     */
    projectFiles() {
        const pyFiles = this.glob('**/*.py');
        return pyFiles.map((file) => [file, file]);
    }
    runCommand() {
        if (this.exists('main.py'))
            return `python${this.pythonVersionSuffix()} main.py`;
    }
}
exports.default = PythonGenerator;
