"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const path_1 = __importDefault(require("path"));
const tmp_1 = __importDefault(require("tmp"));
const errors_1 = require("./errors");
/**
 * A utility base class for the `Parser` and `Generator` classes
 * providing a convenient interface to a filesystem folder and HTTP requests
 */
class Doer {
    constructor(urlFetcher, folder) {
        if (!folder)
            folder = tmp_1.default.dirSync().name;
        this.folder = folder;
        this.urlFetcher = urlFetcher;
    }
    /**
     * Does a path exist within the project folder?
     *
     * @param subpath The path within the folder
     */
    exists(subpath) {
        return fs_1.default.existsSync(path_1.default.join(this.folder, subpath));
    }
    /**
     * Get a list of paths that match a pattern in the project folder.
     *
     * @param pattern The glob pattern
     */
    glob(pattern) {
        try {
            return fast_glob_1.default.sync(pattern, {
                cwd: this.folder,
            });
        }
        catch (error) {
            if (error.code === 'EACCES') {
                throw new errors_1.PermissionError(`You do no have permission to access the whole of folder "${this.folder}". Are you sure you want Dockta to compile this folder?`);
            }
            else
                throw error;
        }
    }
    /**
     * Read a file within the project folder
     *
     * @param subpath The path within the folder
     */
    read(subpath) {
        return fs_1.default.readFileSync(path_1.default.join(this.folder, subpath), 'utf8');
    }
    /**
     * Write to a file within the project folder
     *
     * @param subpath The path within the folder
     * @param content The content to write to the file
     */
    write(subpath, content) {
        fs_1.default.writeFileSync(path_1.default.join(this.folder, subpath), content, 'utf8');
    }
    /**
     * Fetch content from a URL
     *
     * @param url The URL to fetch
     * @param options Request options
     */
    async fetch(url, options = { json: true }) {
        return this.urlFetcher.fetchUrl(url, options);
    }
}
exports.default = Doer;
