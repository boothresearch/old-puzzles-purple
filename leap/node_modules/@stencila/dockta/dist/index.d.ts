/**
 * Compile a folder to an environment, optionally with nix too.
 *
 * @param folder Path of the folder to compile
 * @param useNix Compile the environment for nix
 */
export declare function compile(folder: string, useNix: boolean, addStencila: boolean, from?: string): Promise<void>;
/**
 * Build an environment from a folder, optionally using nix.
 *
 * @param folder Path of the folder to build
 * @param useNix Build the environment with nix
 */
export declare function build(folder: string, useNix: boolean, addStencila: boolean, from?: string): Promise<void>;
/**
 * Execute a command inside a folder, by first building the environment inside that folder.
 * If the environment has already been built it will not be rebuilt.
 *
 * @param folder Path of folder to build into environment
 * @param command The command to execute
 * @param useNix Build the environment with nix
 * @param outputFormat The format to output as ('json' or 'yaml')
 * @param outputFunction Optional callback to receive the output. If undefined, node output goes to stdout.
 */
export declare function execute(folder: string, command: string, useNix: boolean, outputFormat?: string, outputFunction?: Function): Promise<void>;
/**
 * List the people your project depends upon.
 *
 * @param folder Path of folder to examine
 * @param depth Maximum depth of dependencies to traverse to find people
 * @param outputFunction Optional callback to receive the output. If undefined, utput goes to stdout.
 */
export declare function who(folder: string, depth?: number, outputFunction?: Function): Promise<void>;
