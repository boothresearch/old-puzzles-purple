"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var OperatingSystem_1;
"use strict";
const decorators_1 = require("./decorators");
const Intangible_1 = __importDefault(require("./Intangible"));
/**
 * A collection of software that manages computer hardware resources
 *
 * @see {@link https://www.wikidata.org/wiki/Q9135}
 */
let OperatingSystem = OperatingSystem_1 = class OperatingSystem extends Intangible_1.default {
};
// Instances of OperatingSystem (high level)
/**
 * Linux operating system family that use the Linux kernel. For instance GNU/Linux or Android.
 *
 * @see {@link https://www.wikidata.org/wiki/Q388}
 */
OperatingSystem.linux = new OperatingSystem_1({ name: 'Linux' });
/**
 * macOS operating system for Apple computers, launched in 2001 as Mac OS X
 *
 * @see {@link https://www.wikidata.org/wiki/Q14116}
 */
OperatingSystem.macos = new OperatingSystem_1({ name: 'macOS' });
/**
 * Unix family of computer operating systems that derive from the original AT&T Unix
 *
 * @see {@link https://www.wikidata.org/wiki/Q11368}
 */
OperatingSystem.unix = new OperatingSystem_1({ name: 'Unix' });
/**
 * Windows family of operating systems produced for personal computers,
 * servers, smartphones and embedded devices
 *
 * @see {@link https://www.wikidata.org/wiki/Q1406}
 */
OperatingSystem.windows = new OperatingSystem_1({ name: 'Windows' });
OperatingSystem = OperatingSystem_1 = __decorate([
    decorators_1.type('stencila:OperatingSystem')
], OperatingSystem);
exports.default = OperatingSystem;
