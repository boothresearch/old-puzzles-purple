"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("./decorators");
const SoftwareSourceCode_1 = __importDefault(require("./SoftwareSourceCode"));
/**
 * A software package.
 *
 * This is an extension class defined for this context.
 * It is necessary because `schema:SoftwareSourceCode`
 * has most, but not all, of the properties that we need to represent a package,
 * for applications such as Dockter.
 * Meanwhile, `schema:SoftwareApplication` has some of those missing
 * properties but lacks most. This type does
 * not introduce any new properties, but rather uses
 * schema.org properties on a subtype of `schema:SoftwareSourceCode`
 *
 * An alternative approach would be to create a `SoftwareApplication` which
 * links to one or more `SoftwarePackages`. See https://github.com/codemeta/codemeta/issues/198
 */
let SoftwarePackage = class SoftwarePackage extends SoftwareSourceCode_1.default {
    /**
     * A software package.
     *
     * This is an extension class defined for this context.
     * It is necessary because `schema:SoftwareSourceCode`
     * has most, but not all, of the properties that we need to represent a package,
     * for applications such as Dockter.
     * Meanwhile, `schema:SoftwareApplication` has some of those missing
     * properties but lacks most. This type does
     * not introduce any new properties, but rather uses
     * schema.org properties on a subtype of `schema:SoftwareSourceCode`
     *
     * An alternative approach would be to create a `SoftwareApplication` which
     * links to one or more `SoftwarePackages`. See https://github.com/codemeta/codemeta/issues/198
     */
    constructor() {
        super(...arguments);
        /**
         * Type of software application, e.g. 'Game, Multimedia'.
         *
         * @see {@link https://schema.org/applicationCategory}
         */
        this.applicationCategories = [];
        /**
         * Subcategory of the application, e.g. 'Arcade Game'.
         *
         * @see {@link https://schema.org/applicationSubCategory}
         */
        this.applicationSubCategories = [];
        /**
         * Operating systems supported (Windows 7, OSX 10.6, Android 1.6).
         *
         * `schema:operatingSystem` expects type `Text`, whereas here we
         * expect `OperatingSystem`
         *
         * @see {@link https://schema.org/operatingSystem}
         */
        this.operatingSystems = [];
        /**
         * Component dependency requirements for application.
         * This includes runtime environments and shared libraries that are not included in
         * the application distribution package, but required to run the application.
         *
         * The [`schema:softwareRequirements`](https://schema.org/softwareRequirements)
         * property allows for `Text` or `URL` values. Here, we allow
         * values of software packages or applications.
         *
         * @see {@link https://schema.org/softwareRequirements}
         */
        this.softwareRequirements = [];
    }
};
__decorate([
    decorators_1.property('schema:applicationCategory'),
    __metadata("design:type", Array)
], SoftwarePackage.prototype, "applicationCategories", void 0);
__decorate([
    decorators_1.property('schema:applicationSubCategory'),
    __metadata("design:type", Array)
], SoftwarePackage.prototype, "applicationSubCategories", void 0);
__decorate([
    decorators_1.property('schema:operatingSystem'),
    __metadata("design:type", Array)
], SoftwarePackage.prototype, "operatingSystems", void 0);
__decorate([
    decorators_1.property('schema:softwareRequirements'),
    __metadata("design:type", Array)
], SoftwarePackage.prototype, "softwareRequirements", void 0);
SoftwarePackage = __decorate([
    decorators_1.type('stencila:SoftwarePackage')
], SoftwarePackage);
exports.default = SoftwarePackage;
