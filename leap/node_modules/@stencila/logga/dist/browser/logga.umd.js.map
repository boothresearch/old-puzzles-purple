{"version":3,"file":"logga.umd.js","sources":["../../index.ts"],"sourcesContent":["/* global CustomEvent */\n\nconst LOG_EVENT_NAME = 'stencila:logga'\n\n/**\n * The global log event bus from which all events are emitted\n * and handlers are attached.\n *\n * When in Node, exposes the event API of Node `process`.\n * When in a browser, creates adaptor functions to mimic the\n * Node API using `window` event handling functions.\n */\nlet bus: {\n  emit: (event: string, data: LogData) => void\n  listeners: (event: string) => LogHandler[]\n  addListener: (event: string, handler: LogHandler) => void\n  removeListener: (event: string, handler: LogHandler) => void\n  removeAllListeners: (event: string) => void\n}\nif (typeof process !== 'undefined') {\n  bus = {\n    /* eslint-disable @typescript-eslint/unbound-method */\n    emit: process.emit as typeof bus.emit,\n    listeners: process.listeners as typeof bus.listeners,\n    addListener: process.addListener as typeof bus.addListener,\n    removeListener: process.removeListener,\n    removeAllListeners: process.removeAllListeners,\n    /* eslint-enable @typescript-eslint/unbound-method */\n  }\n}\n/* istanbul ignore next */\nif (typeof window !== 'undefined') {\n  /**\n   * To mimic the Node event API in the browser it is necessary to:\n   *\n   * - wrap `LogData` in a `CustomEvent` when emitting an event and\n   *   unwrap it when handling an event\n   * - maintain a list of event listeners (`window` does not expose\n   *   that for us)\n   * - use a map of handlers to listeners so that we can remove them\n   */\n  type CustomEventListener = (customEvent: CustomEvent<LogData>) => void\n  const listeners = new Map<LogHandler, CustomEventListener>()\n  bus = {\n    emit: (event: string, data: LogData) => {\n      window.dispatchEvent(\n        new CustomEvent<LogData>(event, { detail: data })\n      )\n    },\n    listeners: () => {\n      return Array.from(listeners.keys())\n    },\n    addListener: (event: string, handler: LogHandler) => {\n      const listener = (customEvent: CustomEvent<LogData>): void =>\n        handler(customEvent.detail)\n      // @ts-ignore\n      window.addEventListener(event, listener)\n      listeners.set(handler, listener)\n    },\n    removeListener: (event: string, handler: LogHandler) => {\n      const listener = listeners.get(handler)\n      if (listener === undefined) return\n      // @ts-ignore\n      window.removeEventListener(event, listener)\n      listeners.delete(handler)\n    },\n    removeAllListeners: (event: string) => {\n      Array.from(listeners.values()).map((listener) => {\n        // @ts-ignore\n        window.removeEventListener(event, listener)\n      })\n      listeners.clear()\n    },\n  }\n}\n\n/**\n * The severity level of a log event.\n */\nexport enum LogLevel {\n  error = 0,\n  warn,\n  info,\n  debug,\n}\n\n/**\n * Information supplied to the logger\n * about a log event.\n */\nexport interface LogEvent {\n  message?: string\n  stack?: string\n}\n\n/**\n * Data associated with a log event\n */\nexport interface LogData {\n  tag: string\n  level: LogLevel\n  message: string\n  stack?: string\n}\n\n/**\n * A log event emitter\n */\nexport interface Logger {\n  error(message: string | LogEvent): void\n  warn(message: string | LogEvent): void\n  info(message: string | LogEvent): void\n  debug(message: string | LogEvent): void\n}\n\n/**\n * A log event handler\n */\nexport interface LogHandler {\n  (data: LogData): void\n}\n\n/**\n * Take a message `string`, or `LogInfo` object,\n * and emit an event with a `LogData` object.\n *\n * For `LogLevel.error`, if `LogInfo` does not have a `stack`,\n * one is generated and set on the `LogData`.\n *\n * @param info\n * @param level\n */\nfunction emitLogData(\n  info: LogEvent | string,\n  tag: string,\n  level: LogLevel\n): void {\n  let message = ''\n  if (typeof info === 'object' && info.message !== undefined) {\n    message = info.message\n  } else if (typeof info === 'string') {\n    message = info\n  }\n\n  const data: LogData = { tag, level, message }\n\n  if (typeof info === 'object' && info.stack !== undefined) {\n    data.stack = info.stack\n  } else if (level <= LogLevel.error) {\n    const error = new Error()\n    if (error.stack !== undefined) {\n      // Remove the first three lines of the stack trace which\n      // are not useful (see issue #3)\n      const lines = error.stack.split('\\n')\n      data.stack = [lines[0], ...lines.slice(3)].join('\\n')\n    }\n  }\n  bus.emit(LOG_EVENT_NAME, data)\n}\n\n/**\n * Get all handlers.\n */\nexport function handlers(): LogHandler[] {\n  return bus.listeners(LOG_EVENT_NAME)\n}\n\n/**\n * Add a handler.\n *\n * @param handler A function that handles the log data.\n * @param filter Options for filtering log data prior to sending to the handler.\n * @param filter.tags A list of tags that the log data should match.\n * @param filter.maxLevel The maximum log level.\n * @param filter.messageRegex A regex that the log message should match.\n * @param filter.func A function that determines if handler is called\n * @returns The handler function that was added.\n */\nexport function addHandler(\n  handler: LogHandler,\n  filter: {\n    tags?: string[]\n    maxLevel?: LogLevel\n    messageRegex?: RegExp\n    func?: (logData: LogData) => boolean\n  } = {}\n): LogHandler {\n  let listener = handler\n  const { tags, maxLevel, messageRegex, func } = filter\n  if (\n    tags !== undefined ||\n    maxLevel !== undefined ||\n    messageRegex !== undefined ||\n    func !== undefined\n  ) {\n    listener = (logData: LogData) => {\n      if (tags !== undefined && !tags.includes(logData.tag)) return\n      if (maxLevel !== undefined && logData.level > maxLevel) return\n      if (messageRegex !== undefined && !messageRegex.test(logData.message))\n        return\n      if (func !== undefined && !func(logData)) return\n      handler(logData)\n    }\n  }\n  bus.addListener(LOG_EVENT_NAME, listener)\n  return listener\n}\n\n/**\n * Remove a handler.\n *\n * @param handler The handler function to remove.\n */\nexport function removeHandler(handler: LogHandler): void {\n  bus.removeListener(LOG_EVENT_NAME, handler)\n}\n\n/**\n * Remove all handlers.\n */\nexport function removeHandlers(): void {\n  bus.removeAllListeners(LOG_EVENT_NAME)\n}\n\n/**\n * Replace all existing handlers with a new handler.\n *\n * This is a convenience function that can be used to\n * replace the default handler with a new one which logs\n * to the console.\n */\nexport function replaceHandlers(handler: LogHandler): void {\n  removeHandlers()\n  addHandler(handler)\n}\n\nconst defaultHandlerHistory = new Map<string, number>()\n\n/**\n * Default log event handler.\n *\n * Prints the event data to stderr:\n *\n * - with cutesy emoji, colours and stack (for errors) if stderr is TTY (for human consumption)\n * - as JSON if stderr is not TTY (for machine consumption e.g. log files)\n *\n * If in Node.js, and the\n *\n * @param data The log data to handle\n * @param options.maxLevel The maximum log level to print. Defaults to `info`.\n * @param options.showStack Whether or not to show any stack traces for errors. Defaults to `false`.\n * @param options.exitOnError Whether or not to exit the process on the first error. Defaults to `true`.\n * @param options.throttle.signature The log event signature to use for throttling. Defaults to '' (i.e. all events)\n * @param options.throttle.duration The duration for throttling (milliseconds). Defaults to 1000ms\n */\nexport function defaultHandler(\n  data: LogData,\n  options: {\n    maxLevel?: LogLevel\n    showStack?: boolean\n    exitOnError?: boolean\n    throttle?: {\n      signature?: string\n      duration?: number\n    }\n  } = {}\n): void {\n  const { tag, level, message, stack } = data\n\n  // Skip if greater than desired reporting level\n  const { maxLevel = LogLevel.info } = options\n  if (level > maxLevel) return\n\n  // Skip if within throttling duration for the event signature\n  const { throttle } = options\n  if (throttle !== undefined) {\n    const signature = throttle.signature !== undefined ? throttle.signature : ''\n    const eventSignature = signature\n      .replace(/\\${tag}/, tag)\n      .replace(/\\${level}/, level.toString())\n      .replace(/\\${message}/, message)\n    const lastTime = defaultHandlerHistory.get(eventSignature)\n    if (lastTime !== undefined) {\n      const duration =\n        throttle.duration !== undefined ? throttle.duration : 1000\n      if (Date.now() - lastTime < duration) return\n    }\n    defaultHandlerHistory.set(eventSignature, Date.now())\n  }\n\n  // Generate a human readable or machine readable log entry based on\n  // environment\n  let entry = ''\n  if (\n    typeof process !== 'undefined' &&\n    process.stderr !== undefined &&\n    process.stderr.isTTY !== true\n  ) {\n    entry = JSON.stringify({ time: new Date().toISOString(), ...data })\n  } else {\n    const index = level < 0 ? 0 : level > 3 ? 3 : level\n    const label = LogLevel[index].toUpperCase().padEnd(5, ' ')\n    /* istanbul ignore next */\n    if (typeof window !== 'undefined') {\n      entry = `${label} ${tag} ${message}`\n    } else {\n      const emoji = [\n        'üö®', // error\n        '‚ö†', // warn\n        'üõà', // info\n        'üêõ', // debug\n      ][index]\n      const colour = [\n        '\\u001b[31;1m', // red\n        '\\u001b[33;1m', // yellow\n        '\\u001b[34;1m', // blue\n        '\\u001b[30;1m', // grey (bright black)\n      ][index]\n      const cyan = '\\u001b[36m'\n      const reset = '\\u001b[0m'\n      entry = `${emoji} ${colour}${label}${reset} ${cyan}${tag}${reset} ${message}`\n    }\n\n    const { showStack = false } = options\n    if (showStack && stack !== undefined) entry += '\\n  ' + stack\n  }\n  console.error(entry)\n\n  const { exitOnError = true } = options\n  if (\n    typeof process !== 'undefined' &&\n    exitOnError &&\n    level === LogLevel.error\n  ) {\n    process.exit(1)\n  }\n}\n\n// Enable the default handler if there no other handler\n// already enabled e.g. by another package using `logga`\nif (handlers().length === 0) addHandler(defaultHandler)\n\n/**\n * Get a logger for the specific application or package.\n *\n * Each of the returned logger functions are the public interface for\n * posting log messages.\n *\n * @param tag The unique application or package name\n */\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function getLogger(tag: string): Logger {\n  return {\n    error(message: string | LogEvent) {\n      emitLogData(message, tag, LogLevel.error)\n    },\n    warn(message: string | LogEvent) {\n      emitLogData(message, tag, LogLevel.warn)\n    },\n    info(message: string | LogEvent) {\n      emitLogData(message, tag, LogLevel.info)\n    },\n    debug(message: string | LogEvent) {\n      emitLogData(message, tag, LogLevel.debug)\n    },\n  }\n}\n"],"names":["bus","LogLevel","process","emit","listeners","addListener","removeListener","removeAllListeners","window","Map","event","data","dispatchEvent","CustomEvent","detail","Array","from","keys","handler","listener","customEvent","addEventListener","set","get","undefined","removeEventListener","delete","values","map","clear","emitLogData","info","tag","level","message","stack","error","Error","lines","split","slice","join","handlers","addHandler","filter","tags","maxLevel","messageRegex","func","logData","includes","test","removeHandlers","defaultHandlerHistory","defaultHandler","options","throttle","eventSignature","signature","replace","toString","lastTime","duration","Date","now","entry","stderr","isTTY","JSON","stringify","time","toISOString","index","label","toUpperCase","padEnd","emoji","showStack","console","exitOnError","exit","length","warn","debug"],"mappings":"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"}