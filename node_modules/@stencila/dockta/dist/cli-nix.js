"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
const dockerode_1 = __importDefault(require("dockerode"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const NixGenerator_1 = __importDefault(require("./NixGenerator"));
const CachingUrlFetcher_1 = __importDefault(require("./CachingUrlFetcher"));
const generator = new NixGenerator_1.default(new CachingUrlFetcher_1.default(), undefined);
const docker = new dockerode_1.default();
/**
 * Generates a default.nix and a nixDockerfile for a `SoftwareEnvironment`
 */
function compile(environ, folder) {
    // Generate .default.nix file
    generator.generate(environ, folder);
    // Figure out if a custom default.nix file is present
    const defaultNix = path_1.default.join(folder, 'default.nix');
    const docktaNix = path_1.default.join(folder, '.default.nix');
    const nixfile = fs_1.default.existsSync(defaultNix) ? defaultNix : docktaNix;
    // Generate .nixDockerfile
    const dockerfile = path_1.default.join(folder, '.nixDockerfile');
    fs_1.default.writeFileSync(dockerfile, `FROM nixos/nix

# Copy over the Nix derivation
COPY ${path_1.default.basename(nixfile)} default.nix
# Run nix-shell
CMD nix-shell --pure\n`);
}
/**
 * Builds a Docker image from a nixDockerfile
 */
async function build(folder) {
    const name = path_1.default.basename(folder).toLocaleLowerCase().replace(' ', '-');
    // Figure out if a custom default.nix file is present
    const defaultNix = path_1.default.join(folder, 'default.nix');
    const docktaNix = path_1.default.join(folder, '.default.nix');
    const nixfile = fs_1.default.existsSync(defaultNix) ? defaultNix : docktaNix;
    // Start building the image
    const build = await docker.buildImage({
        context: folder,
        src: ['.nixDockerfile', path_1.default.basename(nixfile)],
    }, { t: name, dockerfile: '.nixDockerfile' });
    // Wait for image to finish building
    docker.modem.followProgress(build, (err, res) => {
        if (err)
            throw err;
        output(res);
    });
}
/**
 * Executes nix-shell inside a Docker image from nixDockerfile with a Docker data volume for /nix store
 */
async function execute(folder, command = '') {
    // Create shared /nix/store Docker volume if needed
    const volumes = await docker.listVolumes();
    const nixStoreVolume = volumes.Volumes.find((vol) => vol.Name === 'nix-store');
    if (!nixStoreVolume) {
        await docker.createVolume({ name: 'nix-store' });
    }
    const name = path_1.default.basename(folder).toLocaleLowerCase().replace(' ', '-');
    let args = `run -it --rm -v /tmp:/tmp -v nix-store:/nix ${name}`;
    // If there is a user specified command then run that within the Nix shell, otherwise
    // will run the CMD from the Dockerfile
    if (command)
        args += ` /root/.nix-profile/bin/nix-shell --pure --run "${command.replace('"', '\\"')}"`;
    child_process_1.spawnSync('docker', args.split(' '), {
        shell: true,
        cwd: process.cwd(),
        stdio: 'inherit',
    });
}
exports.default = { compile, build, execute };
/**
 * Print output to stdout
 *
 * @param object The object to print
 * @param format The format use: `json` or `yaml`
 */
function output(object, format = 'json') {
    if (object)
        console.log(format === 'yaml'
            ? js_yaml_1.default.safeDump(object, { lineWidth: 120 })
            : JSON.stringify(object, null, '  '));
}
