"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
/**
 * Parses a value and converts it to a Map (recursively) if it is a plain JavaScript object, otherwise just return the
 * value
 */
function valueToMap(value) {
    if (!Array.isArray(value) && typeof value === 'object') {
        const m = new Map();
        for (const key in value) {
            if (!Object.hasOwnProperty.call(value, key)) {
                continue;
            }
            m.set(key, valueToMap(value[key]));
        }
        return m;
    }
    return value;
}
/**
 * An object that looks up if any system packages are required for a Python package.
 * The lookup is in the format {packageName: pythonVersion: systemPackageType: systemVersion: [sysPackage, sysPackage...]}
 */
class PythonSystemPackageLookup {
    /**
     * @param packageLookup: PythonSystemPackageLookupMap the Map
     */
    constructor(packageLookup) {
        this.packageLookup = packageLookup;
    }
    /**
     * Construct a `PythonSystemPackageLookup` by parsing a JSON representation of the package map from `path`
     */
    static fromFile(path) {
        const dependencyLookupRaw = JSON.parse(fs_1.default.readFileSync(path, 'utf8'));
        return new PythonSystemPackageLookup(valueToMap(dependencyLookupRaw));
    }
    /**
     * Look up the system package required for a python package given python version, package type and system version.
     * Will always return an Array, which will be empty if there are no packages to install.
     */
    lookupSystemPackage(pythonPackage, pythonMajorVersion, systemPackageType, systemVersion) {
        const pyPackageMap = this.packageLookup.get(pythonPackage);
        if (!pyPackageMap) {
            return [];
        }
        const pyVersionStr = `${pythonMajorVersion}`;
        let pyVersionMap;
        if (pyPackageMap.has(pyVersionStr)) {
            pyVersionMap = pyPackageMap.get(pyVersionStr);
        }
        else {
            pyVersionMap = pyPackageMap.get('default');
        }
        if (!pyVersionMap) {
            return [];
        }
        let systemVersionMap;
        if (pyVersionMap.has(systemPackageType)) {
            systemVersionMap = pyVersionMap.get(systemPackageType);
        }
        else {
            systemVersionMap = pyVersionMap.get('default');
        }
        if (!systemVersionMap) {
            return [];
        }
        let systemPackages;
        if (systemVersionMap.has(systemVersion)) {
            systemPackages = systemVersionMap.get(systemVersion);
        }
        else {
            systemPackages = systemVersionMap.get('default');
        }
        return systemPackages !== null && systemPackages !== void 0 ? systemPackages : [];
    }
}
exports.default = PythonSystemPackageLookup;
