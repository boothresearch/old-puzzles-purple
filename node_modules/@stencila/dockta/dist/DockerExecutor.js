"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const stream_1 = __importDefault(require("stream"));
const dockerode_1 = __importDefault(require("dockerode"));
/**
 * Executes a Docker environment.
 *
 * This class has a single method, `execute`, which starts a container from an
 * image and runs the command specified in the Dockerfile `CMD` instruction.
 *
 * It mounts the project's directory into the container a `/work` and uses it
 * as the working directory.
 *
 * It also sets the current user and group as the
 * user and group in the container. This means that within the container the
 * command that runs has the same permissions as the current user does in the
 * `/work` directory.
 *
 * Finally, it removes the container (but not the image).
 *
 * This then is the equivalent of running the container with Docker from within
 * the project directory using,
 *
 *     docker run --rm --volume $(pwd):/work --workdir=/work --user=$(id -u):$(id -g) <image>
 */
class DockerExecutor {
    /**
     * Run a Docker container
     *
     * @param name Name of the Docker image to use
     * @param folder Path of the project folder which will be mounted into the image
     */
    async execute(name, folder, command = '') {
        // Capture stdout so we can attempt to parse it
        // to JSON
        let out = '';
        const stdout = new stream_1.default.Writable({
            write(chunk, encoding, callback) {
                out += chunk.toString();
                callback();
            },
        });
        // Just write errors through to local console error
        const stderr = new stream_1.default.Writable({
            write(chunk, encoding, callback) {
                console.error(chunk.toString());
                callback();
            },
        });
        // Get and set user:group
        const userInfo = os_1.default.userInfo();
        const user = `${userInfo.uid}:${userInfo.gid}`;
        // Run the container!
        // Options from https://docs.docker.com/engine/api/v1.37/#operation/ContainerCreate
        const docker = new dockerode_1.default();
        // If the user has specified a command thaen use  that, otherwise fallback to the
        // CMD in the Dockerfile
        let cmd;
        if (command)
            cmd = command.split(' ');
        await docker.run(name, [], [stdout, stderr], {
            Cmd: cmd,
            HostConfig: {
                Binds: [`${path_1.default.resolve(folder)}:/work`],
            },
            Tty: false,
            User: user,
            WorkingDir: '/work',
        });
        // Attempt to parse output as JSON
        try {
            return JSON.parse(out);
        }
        catch (_a) {
            return out.trim();
        }
    }
}
exports.default = DockerExecutor;
