#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = __importDefault(require("os"));
// @ts-ignore
const yargonaut_1 = __importDefault(require("yargonaut"));
const yargs_1 = __importDefault(require("yargs"));
const errors_1 = require("./errors");
const index_1 = require("./index");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const VERSION = require('../package').version;
yargonaut_1.default.style('blue').helpStyle('green').errorsStyle('red');
yargs_1.default
    .scriptName('dockta')
    // Help global option
    .alias('h', 'help')
    .usage('$0 <cmd> [args]')
    // Version global option
    .alias('v', 'version')
    .version(VERSION)
    .describe('version', 'Show version')
    // Nix global option
    .option('nix', {
    describe: 'Use NixOS base image',
    type: 'boolean',
})
    .option('from', {
    describe: 'The base docker image to inherit FROM',
})
    .option('stencila', {
    describe: 'Add stencila execution hosts',
    default: false,
    type: 'boolean',
})
    // Ensure at least one command
    .demandCommand(1, 'Please provide a command.')
    // Provide suggestions regarding similar commands if no matching command is found
    .recommendCommands()
    // Any command-line argument given that is not demanded, or does not have a corresponding description, will be reported as an error.
    // Unrecognized commands will also be reported as errors.
    .strict()
    // Compile command
    // @ts-ignore
    .command('compile [folder]', 'Compile a project to a software environment', (yargs) => {
    folderArg(yargs);
}, (args) => {
    index_1.compile(args.folder, args.nix, args.stencila, args.from).catch((err) => error(err));
})
    // Build command
    // @ts-ignore
    .command('build [folder]', 'Build a Docker image for project', (yargs) => {
    folderArg(yargs);
}, (args) => {
    index_1.build(args.folder, args.nix, args.stencila, args.from).catch((err) => error(err));
})
    // Execute command
    // @ts-ignore
    .command('execute [folder] [command]', 'Execute a project', (yargs) => {
    folderArg(yargs);
    yargs.positional('command', {
        type: 'string',
        default: '',
        describe: 'The command to execute',
    });
}, (args) => {
    index_1.execute(args.folder, args.command, args.nix).catch((err) => error(err));
})
    // Who command
    // @ts-ignore
    .command('who [folder]', 'List the people your project depends upon', (yargs) => {
    folderArg(yargs);
    yargs.option('depth', {
        alias: 'd',
        type: 'number',
        default: 100,
        describe: 'The maximum dependency recursion depth',
    });
}, (args) => {
    index_1.who(args.folder, args.depth).catch((err) => error(err));
})
    .parse();
/**
 * Specify the [folder] argument settings
 *
 * @param yargs The yargs object
 */
function folderArg(yargs) {
    yargs.positional('folder', {
        type: 'string',
        default: '.',
        describe: 'The path to the project folder',
    });
}
/**
 * Print an error to stderr
 *
 * @param error The error to print
 */
function error(error) {
    if (error instanceof errors_1.ApplicationError) {
        console.error(error.message);
    }
    else {
        console.error('Woops, sorry something went wrong :(');
        console.error('Please help us fix this issue by posting this output to https://github.com/stencila/dockta/issues/new');
        console.error(`  args: ${process.argv.slice(2).join(' ')}`);
        console.error(`  version: ${VERSION}`);
        console.error(`  platform: ${os_1.default.platform()}`);
        console.error(error);
        process.exit(1);
    }
}
