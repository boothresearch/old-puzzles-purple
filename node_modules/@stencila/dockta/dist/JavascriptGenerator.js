"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const PackageGenerator_1 = __importDefault(require("./PackageGenerator"));
const PACKAGE_JSON_GENERATED = '.package.json';
const PACKAGE_JSON = 'package.json';
/**
 * A Dockerfile generator for Javascript projects
 */
class JavascriptGenerator extends PackageGenerator_1.default {
    // Methods that override those in `Generator`
    constructor(urlFetcher, pkg, folder, nodeMajorVersion = 12) {
        super(urlFetcher, pkg, folder);
        this.nodeMajorVersion = nodeMajorVersion;
    }
    applies() {
        return this.package.runtimePlatform === 'Node.js';
    }
    aptKeysCommand(sysVersion) {
        return 'curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -';
    }
    aptRepos(sysVersion) {
        const baseVersionName = this.baseVersionName(sysVersion);
        return [
            `deb https://deb.nodesource.com/node_${this.nodeMajorVersion}.x ${baseVersionName} main`,
        ];
    }
    aptPackages(sysVersion) {
        return ['nodejs'];
    }
    stencilaInstall(sysVersion) {
        return `npm install stencila-node@0.28.15 \\
 && node -e "require('stencila-node').register()"`;
    }
    installFiles(sysVersion) {
        // Use any existing 'package.json'
        if (this.exists(PACKAGE_JSON))
            return [[PACKAGE_JSON, PACKAGE_JSON]];
        // Generate a `.package.json` file to copy into image
        const dependencies = {};
        for (const dependency of this.filterPackages('Node.js')) {
            dependencies[dependency.name] = dependency.version;
        }
        const pkgjson = {
            name: this.package.name || 'unnamed',
            dependencies,
        };
        this.write(PACKAGE_JSON_GENERATED, JSON.stringify(pkgjson, null, ' '));
        return [[PACKAGE_JSON_GENERATED, PACKAGE_JSON]];
    }
    installCommand(sysVersion) {
        return 'npm install package.json';
    }
    projectFiles() {
        const files = this.glob('**/*.js');
        return files.map((file) => [file, file]);
    }
    runCommand() {
        if (this.exists('main.js'))
            return `node main.js`;
    }
}
exports.default = JavascriptGenerator;
