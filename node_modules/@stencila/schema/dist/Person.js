"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Person_1;
"use strict";
const decorators_1 = require("./decorators");
const Thing_1 = __importDefault(require("./Thing"));
/**
 * A person (alive, dead, undead, or fictional).
 *
 * @see {@link https://schema.org/Person}
 */
let Person = Person_1 = class Person extends Thing_1.default {
    /**
     * A person (alive, dead, undead, or fictional).
     *
     * @see {@link https://schema.org/Person}
     */
    constructor() {
        super(...arguments);
        /**
         * A person (alive, dead, undead, or fictional).
         *
         * @see {@link https://schema.org/email}
         */
        this.emails = [];
        /**
         * Family name. In the U.S., the last name of an Person.
         * This can be used along with givenName instead of the name property.
         *
         * @see {@link https://schema.org/familyName}
         */
        this.familyNames = [];
        /**
         * Given name. In the U.S., the first name of a Person.
         * This can be used along with familyName instead of the name property.
         *
         * @see {@link https://schema.org/givenName}
         */
        this.givenNames = [];
    }
    /**
     * Create a `Person` object from a `Text` value.
     *
     * The text value can contain email and URL in the format:
     *
     *   Joe Bloggs <joe@example.com> (https://example.com/joe)
     *
     * @param text The text value to parse
     * @returns A `Person` object
     */
    static fromText(text) {
        const person = new Person_1();
        const match = text.match(/^(?:\s*)([^\s]*)(?:\s+)?([^\s]+)?\s*(<([^>]*)>)?\s*(\(([^)]*)\))?/);
        if (match) {
            if (match[1]) {
                person.givenNames = [match[1]];
                person.name = person.givenNames.join(' ');
            }
            if (match[2]) {
                person.familyNames = [match[2]];
                person.name += ' ' + person.familyNames.join(' ');
            }
            if (match[4])
                person.emails = [match[4]];
            if (match[6])
                person.urls = [match[6]];
        }
        else {
            person.name = text;
        }
        return person;
    }
};
__decorate([
    decorators_1.property('schema:email'),
    __metadata("design:type", Array)
], Person.prototype, "emails", void 0);
__decorate([
    decorators_1.property('schema:familyName'),
    __metadata("design:type", Array)
], Person.prototype, "familyNames", void 0);
__decorate([
    decorators_1.property('schema:givenName'),
    __metadata("design:type", Array)
], Person.prototype, "givenNames", void 0);
Person = Person_1 = __decorate([
    decorators_1.type('schema:Person')
], Person);
exports.default = Person;
