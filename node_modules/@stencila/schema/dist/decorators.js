"use strict";
/**
 * Decorators for storing meta data on types and properties
 * for runtime type checking, schema validation
 * and serialization / serialization.
 */
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
/**
 * Define a type.
 *
 * @param id The `@id` of the type e.g. `schema:Thing` for https://schema.org/Thing
 */
function type(id) {
    return function (target) {
        Reflect.defineMetadata('type:id', id, target);
    };
}
exports.type = type;
/**
 * Define a property.
 *
 * @param id        The `@id` of the property e.g. `schema:name` for https://schema.org/name
 * @param container The `@container` type for the property. Must be `list` or `set` (default).
 *                  A `list` is a ordered collection. A `set` is an unordered collection.
 *                  See the [JSON-LD docs](https://w3c.github.io/json-ld-syntax/#sets-and-lists)
 *                  for more info.
 */
function property(id, container = 'set') {
    return function (target, propertyKey) {
        Reflect.defineMetadata('property:id', id, target, propertyKey);
        if (container)
            Reflect.defineMetadata('property:container', container, target, propertyKey);
    };
}
exports.property = property;
