"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("./decorators");
const Thing_1 = __importDefault(require("./Thing"));
/**
 * The most generic kind of creative work, including books, movies,
 * photographs, software programs, etc.
 *
 * @see {@link https://schema.org/CreativeWork}
 */
let CreativeWork = class CreativeWork extends Thing_1.default {
    /**
     * The most generic kind of creative work, including books, movies,
     * photographs, software programs, etc.
     *
     * @see {@link https://schema.org/CreativeWork}
     */
    constructor() {
        super(...arguments);
        /**
         * The author of this content or rating. Please note that author is special in
         * that HTML 5 provides a special mechanism for indicating authorship via the rel
         * tag. That is equivalent to this and may be used interchangeably.
         *
         * @see {@link https://schema.org/author}
         */
        this.authors = [];
        /**
         * A secondary contributor to the CreativeWork or Event.
         *
         * @see {@link https://schema.org/contributor}
         */
        this.contributors = [];
        /**
         * The creator/author of this CreativeWork. This is the same as
         * the Author property for CreativeWork.
         *
         * @see {@link https://schema.org/creator}
         */
        this.creators = [];
        /**
         * Date of first broadcast/publication.
         *
         * @see {@link https://schema.org/datePublished}
         */
        this.datePublished = '';
        /**
         * Keywords or tags used to describe this content.
         * Multiple entries in a keywords list are typically delimited by commas.
         *
         * @see {@link https://schema.org/keywords}
         */
        this.keywords = '';
        /**
         * A license document that applies to this content, typically indicated by URL.
         *
         * @see {@link https://schema.org/license}
         */
        this.license = '';
        /**
         * The textual content of this CreativeWork.
         *
         * @see {@link https://schema.org/text}
         */
        this.text = '';
        /**
         * The version of the CreativeWork embodied by a specified resource.
         *
         * @see {@link https://schema.org/version}
         */
        this.version = '';
    }
};
__decorate([
    decorators_1.property('schema:author'),
    __metadata("design:type", Array)
], CreativeWork.prototype, "authors", void 0);
__decorate([
    decorators_1.property('schema:contributor'),
    __metadata("design:type", Array)
], CreativeWork.prototype, "contributors", void 0);
__decorate([
    decorators_1.property('schema:creator'),
    __metadata("design:type", Array)
], CreativeWork.prototype, "creators", void 0);
__decorate([
    decorators_1.property('schema:datePublished'),
    __metadata("design:type", String)
], CreativeWork.prototype, "datePublished", void 0);
__decorate([
    decorators_1.property('schema:keywords'),
    __metadata("design:type", String)
], CreativeWork.prototype, "keywords", void 0);
__decorate([
    decorators_1.property('schema:license'),
    __metadata("design:type", Object)
], CreativeWork.prototype, "license", void 0);
__decorate([
    decorators_1.property('schema:text'),
    __metadata("design:type", String)
], CreativeWork.prototype, "text", void 0);
__decorate([
    decorators_1.property('schema:version'),
    __metadata("design:type", Object)
], CreativeWork.prototype, "version", void 0);
CreativeWork = __decorate([
    decorators_1.type('schema:CreativeWork')
], CreativeWork);
exports.default = CreativeWork;
