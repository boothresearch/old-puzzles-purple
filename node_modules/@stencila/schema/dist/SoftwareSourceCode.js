"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("./decorators");
const CreativeWork_1 = __importDefault(require("./CreativeWork"));
/**
 * Computer programming source code. Example: Full (compile ready) solutions,
 * code snippet samples, scripts, templates.
 *
 * @see {@link https://schema.org/SoftwareSourceCode}
 */
let SoftwareSourceCode = class SoftwareSourceCode extends CreativeWork_1.default {
    /**
     * Computer programming source code. Example: Full (compile ready) solutions,
     * code snippet samples, scripts, templates.
     *
     * @see {@link https://schema.org/SoftwareSourceCode}
     */
    constructor() {
        super(...arguments);
        /**
         * Link to the repository where the un-compiled, human readable code and
         * related code is located (SVN, github, CodePlex).
         *
         * @see {@link https://schema.org/codeRepository}
         */
        this.codeRepository = '';
        /**
         * What type of code sample: full (compile ready) solution, code snippet,
         * inline code, scripts, template.
         *
         * @see {@link https://schema.org/codeSampleType}
         */
        this.codeSampleType = '';
        /**
         * Individual responsible for maintaining the software (usually includes an email contact address).
         *
         * Note that CodeMeta says that `maintainer` should be a `Person`, not `Organization` or `Person`
         * as with `author`
         *
         * @see {@link https://codemeta.github.io/terms/}
         */
        this.maintainers = [];
        /**
         * The computer programming language.
         *
         * @see {@link https://schema.org/programmingLanguage}
         */
        this.programmingLanguages = [];
        /**
         * Runtime platform or script interpreter dependencies (Example - Java v1,
         * Python2.3, .Net Framework 3.0).
         *
         * @see {@link https://schema.org/runtimePlatform}
         */
        this.runtimePlatform = '';
        /**
         * Target Operating System / Product to which the code applies. If applies to
         * several versions, just the product name can be used.
         *
         * @see {@link https://schema.org/targetProduct}
         */
        this.targetProducts = [];
    }
};
__decorate([
    decorators_1.property('schema:codeRepository'),
    __metadata("design:type", String)
], SoftwareSourceCode.prototype, "codeRepository", void 0);
__decorate([
    decorators_1.property('schema:codeSampleType'),
    __metadata("design:type", String)
], SoftwareSourceCode.prototype, "codeSampleType", void 0);
__decorate([
    decorators_1.property('codemeta:maintainer'),
    __metadata("design:type", Array)
], SoftwareSourceCode.prototype, "maintainers", void 0);
__decorate([
    decorators_1.property('schema:programmingLanguage'),
    __metadata("design:type", Array)
], SoftwareSourceCode.prototype, "programmingLanguages", void 0);
__decorate([
    decorators_1.property('schema:runtimePlatform'),
    __metadata("design:type", String)
], SoftwareSourceCode.prototype, "runtimePlatform", void 0);
__decorate([
    decorators_1.property('schema:targetProduct'),
    __metadata("design:type", Array)
], SoftwareSourceCode.prototype, "targetProducts", void 0);
SoftwareSourceCode = __decorate([
    decorators_1.type('schema:SoftwareSourceCode')
], SoftwareSourceCode);
exports.default = SoftwareSourceCode;
