"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Thing_1;
"use strict";
require("reflect-metadata");
const decorators_1 = require("./decorators");
/**
 * The most generic type of item.
 *
 * This is base class for all other classes in this schema.
 * As well as definining the properties of a `schema:Thing` it
 * implements methods such as `toJSONLD` for marshalling to JSON-LD.
 *
 * @see {@link https://schema.org/Thing}
 */
let Thing = Thing_1 = class Thing {
    /**
     * Constructor
     *
     * Uses the values of properties in the initializer.
     * Only registered properties (i.e. those with the @property decorator) are initialized.
     * All other values are ignored without warning.
     *
     * @param initializer An object with initial property values
     */
    constructor(initializer = {}) {
        /**
         * The JSON-LD [node identifier](https://w3c.github.io/json-ld-syntax/#node-identifiers) corresponding to
         * the `@id` keyword.
         */
        this.id = '';
        /**
         * A description of the item.
         *
         * @see {@link https://schema.org/description}
         */
        this.description = '';
        /**
         * The identifier property represents any kind of identifier for any kind of Thing,
         * such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties
         * for representing many of these, either as textual strings or as URL (URI) links.
         *
         * @see {@link https://schema.org/identifier}
         */
        this.identifiers = [];
        /**
         * The name of the item.
         *
         * @see {@link https://schema.org/name}
         */
        this.name = '';
        /**
         * URL of the item.
         *
         * @see {@link https://schema.org/url}
         */
        this.urls = [];
        for (let [key, value] of Object.entries(initializer)) {
            if (Reflect.hasMetadata('property:id', this, key)) {
                // @ts-ignore
                this[key] = value;
            }
        }
    }
    /**
     * The JSON-LD [type specifier](https://w3c.github.io/json-ld-syntax/#specifying-the-type) corresponding to
     * the `@type` keyword.
     */
    get type() {
        return this.constructor.name;
    }
    /**
     * Marshall this instance to a JSON-LD object
     */
    toJSONLD(standalone = true) {
        const jsonld = {};
        if (standalone)
            jsonld['@context'] = 'https://stencila.github.io/schema/context.jsonld';
        jsonld['type'] = this.type;
        for (let [key, value] of Object.entries(this)) {
            if (typeof value === 'string' && value.length === 0)
                continue;
            if (Array.isArray(value) && value.length === 0)
                continue;
            let id = Reflect.getMetadata('property:id', this, key);
            let [context, term] = id.split(':');
            if (Array.isArray(value)) {
                jsonld[term] = value.map(item => (item instanceof Thing_1) ? item.toJSONLD(false) : item);
            }
            else if (value instanceof Thing_1) {
                jsonld[term] = value.toJSONLD(false);
            }
            else {
                jsonld[term] = value;
            }
        }
        return jsonld;
    }
};
__decorate([
    decorators_1.property('schema:description'),
    __metadata("design:type", String)
], Thing.prototype, "description", void 0);
__decorate([
    decorators_1.property('schema:identifier'),
    __metadata("design:type", Array)
], Thing.prototype, "identifiers", void 0);
__decorate([
    decorators_1.property('schema:name'),
    __metadata("design:type", String)
], Thing.prototype, "name", void 0);
__decorate([
    decorators_1.property('schema:url'),
    __metadata("design:type", Array)
], Thing.prototype, "urls", void 0);
Thing = Thing_1 = __decorate([
    decorators_1.type('schema:Thing'),
    __metadata("design:paramtypes", [Object])
], Thing);
exports.default = Thing;
