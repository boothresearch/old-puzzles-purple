# JSON Schema for Cell

$schema: http://json-schema.org/draft-07/schema
$id: http://stencila.github.io/specs/Cell.json
title: Cell
type: object
properties:
  type:
    description: The type of node, always `"Cell"`
    type: string
    const: Cell
  lang:
    description: The programming language the source code is written in
    type: string
    enum:
      - r
      - js
      - mini
      - node
      - py
      - pyjp
      - sql
  code:
    description: The source code of the cell
    type: string
  expr:
    description: |
      Should the cell's source code only contain simple expressions?
    $comment: |
      Cells in Sheets usually have `{"expr": true}`.
      This should maybe be renamed as `isExpr` to make is clear it is a boolean.
    type: boolean
    default: false
  global:
    description: |
      Should this cell be executed in the global scope of the execution `Context`?
      Global cells can be useful at the start of a document to import required packages (e.g. `import pandas`) in Python, 
      rather than having to do that in each cell. Defaults to `false` but can be set with a comment flag e.g. `# @global`
      in the cell's code.
    $comment: |
      Cells imported from Jupyter Notebooks or RMarkdown have `{"global": true}`
      to match the execution model of those platforms.
      This should maybe be renamed as `isGlobal` to make is clear it is a boolean.
    type: boolean
    default: false
  inputs:
    description: |
      An array of cell inputs.
    $comment: |
      This is an `array`, rather than an `object` to be consistent with the structure
      of cell `outputs` and to allow for unnamed inputs in the future.
    type: array
    items:
      type: object
      properties:
        name:
          type: string
        value:
          type: object
  outputs:
    description: |
      An array of cell outputs. Outputs can be named, or unnamed.
    $comment: |
      Currently it is assumed that there is a single output. However, this is an 
      `array` to allow for multiple outputs in the future.
    type: array
    items:
      type: object
      properties:
        name:
          description: The name of the output
          type: string
        value:
          description: The value of the output
          type: object
      required:
        - value
  messages:
    description: |
      Messages created during compilation or execution of the cell.
    type: array
    items:
      type: object
      properties:
        type:
          description: The message type
          type: string
          enum:
            - warning
            - error
            - syntax-error
            - runtime-error
        sender:
          description: The message sender
          type: string
          examples:
            - RContext
            - Engine
        message:
          description: The message string
          type: string
        line:
          description: |
            The line number of the cell's source code that the error occurred on 
          type: number
        column:
          description: |
            The column of the cell's source code that the error occurred on 
          type: number
        trace:
          description: |
            A stack trace
          type: string
        required:
          - type
          - message
required:
  - type
  - code
