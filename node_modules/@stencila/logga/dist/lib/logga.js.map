{"version":3,"file":"logga.js","sources":["../../index.ts"],"sourcesContent":["/* global CustomEvent */\n\nconst LOG_EVENT_NAME = 'stencila:logga'\n\n/**\n * The global log event bus from which all events are emitted\n * and handlers are attached.\n *\n * When in Node, exposes the event API of Node `process`.\n * When in a browser, creates adaptor functions to mimic the\n * Node API using `window` event handling functions.\n */\nlet bus: {\n  emit: (event: string, data: LogData) => void\n  listeners: (event: string) => LogHandler[]\n  addListener: (event: string, handler: LogHandler) => void\n  removeListener: (event: string, handler: LogHandler) => void\n  removeAllListeners: (event: string) => void\n}\nif (typeof process !== 'undefined') {\n  bus = {\n    /* eslint-disable @typescript-eslint/unbound-method */\n    emit: process.emit as typeof bus.emit,\n    listeners: process.listeners as typeof bus.listeners,\n    addListener: process.addListener as typeof bus.addListener,\n    removeListener: process.removeListener,\n    removeAllListeners: process.removeAllListeners,\n    /* eslint-enable @typescript-eslint/unbound-method */\n  }\n}\n/* istanbul ignore next */\nif (typeof window !== 'undefined') {\n  /**\n   * To mimic the Node event API in the browser it is necessary to:\n   *\n   * - wrap `LogData` in a `CustomEvent` when emitting an event and\n   *   unwrap it when handling an event\n   * - maintain a list of event listeners (`window` does not expose\n   *   that for us)\n   * - use a map of handlers to listeners so that we can remove them\n   */\n  type CustomEventListener = (customEvent: CustomEvent<LogData>) => void\n  const listeners = new Map<LogHandler, CustomEventListener>()\n  bus = {\n    emit: (event: string, data: LogData) => {\n      window.dispatchEvent(\n        new CustomEvent<LogData>(event, { detail: data })\n      )\n    },\n    listeners: () => {\n      return Array.from(listeners.keys())\n    },\n    addListener: (event: string, handler: LogHandler) => {\n      const listener = (customEvent: CustomEvent<LogData>): void =>\n        handler(customEvent.detail)\n      // @ts-ignore\n      window.addEventListener(event, listener)\n      listeners.set(handler, listener)\n    },\n    removeListener: (event: string, handler: LogHandler) => {\n      const listener = listeners.get(handler)\n      if (listener === undefined) return\n      // @ts-ignore\n      window.removeEventListener(event, listener)\n      listeners.delete(handler)\n    },\n    removeAllListeners: (event: string) => {\n      Array.from(listeners.values()).map((listener) => {\n        // @ts-ignore\n        window.removeEventListener(event, listener)\n      })\n      listeners.clear()\n    },\n  }\n}\n\n/**\n * The severity level of a log event.\n */\nexport enum LogLevel {\n  error = 0,\n  warn,\n  info,\n  debug,\n}\n\n/**\n * Information supplied to the logger\n * about a log event.\n */\nexport interface LogEvent {\n  message?: string\n  stack?: string\n}\n\n/**\n * Data associated with a log event\n */\nexport interface LogData {\n  tag: string\n  level: LogLevel\n  message: string\n  stack?: string\n}\n\n/**\n * A log event emitter\n */\nexport interface Logger {\n  error(message: string | LogEvent): void\n  warn(message: string | LogEvent): void\n  info(message: string | LogEvent): void\n  debug(message: string | LogEvent): void\n}\n\n/**\n * A log event handler\n */\nexport interface LogHandler {\n  (data: LogData): void\n}\n\n/**\n * Take a message `string`, or `LogInfo` object,\n * and emit an event with a `LogData` object.\n *\n * For `LogLevel.error`, if `LogInfo` does not have a `stack`,\n * one is generated and set on the `LogData`.\n *\n * @param info\n * @param level\n */\nfunction emitLogData(\n  info: LogEvent | string,\n  tag: string,\n  level: LogLevel\n): void {\n  let message = ''\n  if (typeof info === 'object' && info.message !== undefined) {\n    message = info.message\n  } else if (typeof info === 'string') {\n    message = info\n  }\n\n  const data: LogData = { tag, level, message }\n\n  if (typeof info === 'object' && info.stack !== undefined) {\n    data.stack = info.stack\n  } else if (level <= LogLevel.error) {\n    const error = new Error()\n    if (error.stack !== undefined) {\n      // Remove the first three lines of the stack trace which\n      // are not useful (see issue #3)\n      const lines = error.stack.split('\\n')\n      data.stack = [lines[0], ...lines.slice(3)].join('\\n')\n    }\n  }\n  bus.emit(LOG_EVENT_NAME, data)\n}\n\n/**\n * Get all handlers.\n */\nexport function handlers(): LogHandler[] {\n  return bus.listeners(LOG_EVENT_NAME)\n}\n\n/**\n * Add a handler.\n *\n * @param handler A function that handles the log data.\n * @param filter Options for filtering log data prior to sending to the handler.\n * @param filter.tags A list of tags that the log data should match.\n * @param filter.maxLevel The maximum log level.\n * @param filter.messageRegex A regex that the log message should match.\n * @param filter.func A function that determines if handler is called\n * @returns The handler function that was added.\n */\nexport function addHandler(\n  handler: LogHandler,\n  filter: {\n    tags?: string[]\n    maxLevel?: LogLevel\n    messageRegex?: RegExp\n    func?: (logData: LogData) => boolean\n  } = {}\n): LogHandler {\n  let listener = handler\n  const { tags, maxLevel, messageRegex, func } = filter\n  if (\n    tags !== undefined ||\n    maxLevel !== undefined ||\n    messageRegex !== undefined ||\n    func !== undefined\n  ) {\n    listener = (logData: LogData) => {\n      if (tags !== undefined && !tags.includes(logData.tag)) return\n      if (maxLevel !== undefined && logData.level > maxLevel) return\n      if (messageRegex !== undefined && !messageRegex.test(logData.message))\n        return\n      if (func !== undefined && !func(logData)) return\n      handler(logData)\n    }\n  }\n  bus.addListener(LOG_EVENT_NAME, listener)\n  return listener\n}\n\n/**\n * Remove a handler.\n *\n * @param handler The handler function to remove.\n */\nexport function removeHandler(handler: LogHandler): void {\n  bus.removeListener(LOG_EVENT_NAME, handler)\n}\n\n/**\n * Remove all handlers.\n */\nexport function removeHandlers(): void {\n  bus.removeAllListeners(LOG_EVENT_NAME)\n}\n\n/**\n * Replace all existing handlers with a new handler.\n *\n * This is a convenience function that can be used to\n * replace the default handler with a new one which logs\n * to the console.\n */\nexport function replaceHandlers(handler: LogHandler): void {\n  removeHandlers()\n  addHandler(handler)\n}\n\nconst defaultHandlerHistory = new Map<string, number>()\n\n/**\n * Default log event handler.\n *\n * Prints the event data to stderr:\n *\n * - with cutesy emoji, colours and stack (for errors) if stderr is TTY (for human consumption)\n * - as JSON if stderr is not TTY (for machine consumption e.g. log files)\n *\n * If in Node.js, and the\n *\n * @param data The log data to handle\n * @param options.maxLevel The maximum log level to print. Defaults to `info`.\n * @param options.showStack Whether or not to show any stack traces for errors. Defaults to `false`.\n * @param options.exitOnError Whether or not to exit the process on the first error. Defaults to `true`.\n * @param options.throttle.signature The log event signature to use for throttling. Defaults to '' (i.e. all events)\n * @param options.throttle.duration The duration for throttling (milliseconds). Defaults to 1000ms\n */\nexport function defaultHandler(\n  data: LogData,\n  options: {\n    maxLevel?: LogLevel\n    showStack?: boolean\n    exitOnError?: boolean\n    throttle?: {\n      signature?: string\n      duration?: number\n    }\n  } = {}\n): void {\n  const { tag, level, message, stack } = data\n\n  // Skip if greater than desired reporting level\n  const { maxLevel = LogLevel.info } = options\n  if (level > maxLevel) return\n\n  // Skip if within throttling duration for the event signature\n  const { throttle } = options\n  if (throttle !== undefined) {\n    const signature = throttle.signature !== undefined ? throttle.signature : ''\n    const eventSignature = signature\n      .replace(/\\${tag}/, tag)\n      .replace(/\\${level}/, level.toString())\n      .replace(/\\${message}/, message)\n    const lastTime = defaultHandlerHistory.get(eventSignature)\n    if (lastTime !== undefined) {\n      const duration =\n        throttle.duration !== undefined ? throttle.duration : 1000\n      if (Date.now() - lastTime < duration) return\n    }\n    defaultHandlerHistory.set(eventSignature, Date.now())\n  }\n\n  // Generate a human readable or machine readable log entry based on\n  // environment\n  let entry = ''\n  if (\n    typeof process !== 'undefined' &&\n    process.stderr !== undefined &&\n    process.stderr.isTTY !== true\n  ) {\n    entry = JSON.stringify({ time: new Date().toISOString(), ...data })\n  } else {\n    const index = level < 0 ? 0 : level > 3 ? 3 : level\n    const label = LogLevel[index].toUpperCase().padEnd(5, ' ')\n    /* istanbul ignore next */\n    if (typeof window !== 'undefined') {\n      entry = `${label} ${tag} ${message}`\n    } else {\n      const emoji = [\n        'üö®', // error\n        '‚ö†', // warn\n        'üõà', // info\n        'üêõ', // debug\n      ][index]\n      const colour = [\n        '\\u001b[31;1m', // red\n        '\\u001b[33;1m', // yellow\n        '\\u001b[34;1m', // blue\n        '\\u001b[30;1m', // grey (bright black)\n      ][index]\n      const cyan = '\\u001b[36m'\n      const reset = '\\u001b[0m'\n      entry = `${emoji} ${colour}${label}${reset} ${cyan}${tag}${reset} ${message}`\n    }\n\n    const { showStack = false } = options\n    if (showStack && stack !== undefined) entry += '\\n  ' + stack\n  }\n  console.error(entry)\n\n  const { exitOnError = true } = options\n  if (\n    typeof process !== 'undefined' &&\n    exitOnError &&\n    level === LogLevel.error\n  ) {\n    process.exit(1)\n  }\n}\n\n// Enable the default handler if there no other handler\n// already enabled e.g. by another package using `logga`\nif (handlers().length === 0) addHandler(defaultHandler)\n\n/**\n * Get a logger for the specific application or package.\n *\n * Each of the returned logger functions are the public interface for\n * posting log messages.\n *\n * @param tag The unique application or package name\n */\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function getLogger(tag: string): Logger {\n  return {\n    error(message: string | LogEvent) {\n      emitLogData(message, tag, LogLevel.error)\n    },\n    warn(message: string | LogEvent) {\n      emitLogData(message, tag, LogLevel.warn)\n    },\n    info(message: string | LogEvent) {\n      emitLogData(message, tag, LogLevel.info)\n    },\n    debug(message: string | LogEvent) {\n      emitLogData(message, tag, LogLevel.debug)\n    },\n  }\n}\n"],"names":["LOG_EVENT_NAME","bus","process","emit","listeners","addListener","removeListener","removeAllListeners","window","Map","event","data","dispatchEvent","CustomEvent","detail","Array","from","keys","handler","listener","customEvent","addEventListener","set","get","undefined","removeEventListener","delete","values","map","clear","LogLevel","emitLogData","info","tag","level","message","stack","error","Error","lines","split","slice","join","handlers","addHandler","filter","tags","maxLevel","messageRegex","func","logData","includes","test","removeHandler","removeHandlers","replaceHandlers","defaultHandlerHistory","defaultHandler","options","throttle","signature","eventSignature","replace","toString","lastTime","duration","Date","now","entry","stderr","isTTY","JSON","stringify","time","toISOString","index","label","toUpperCase","padEnd","emoji","colour","cyan","reset","showStack","console","exitOnError","exit","length","getLogger","warn","debug"],"mappings":"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"}