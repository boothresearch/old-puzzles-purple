/**
 * The severity level of a log event.
 */
export declare enum LogLevel {
    error = 0,
    warn = 1,
    info = 2,
    debug = 3
}
/**
 * Information supplied to the logger
 * about a log event.
 */
export interface LogEvent {
    message?: string;
    stack?: string;
}
/**
 * Data associated with a log event
 */
export interface LogData {
    tag: string;
    level: LogLevel;
    message: string;
    stack?: string;
}
/**
 * A log event emitter
 */
export interface Logger {
    error(message: string | LogEvent): void;
    warn(message: string | LogEvent): void;
    info(message: string | LogEvent): void;
    debug(message: string | LogEvent): void;
}
/**
 * A log event handler
 */
export interface LogHandler {
    (data: LogData): void;
}
/**
 * Get all handlers.
 */
export declare function handlers(): LogHandler[];
/**
 * Add a handler.
 *
 * @param handler A function that handles the log data.
 * @param filter Options for filtering log data prior to sending to the handler.
 * @param filter.tags A list of tags that the log data should match.
 * @param filter.maxLevel The maximum log level.
 * @param filter.messageRegex A regex that the log message should match.
 * @param filter.func A function that determines if handler is called
 * @returns The handler function that was added.
 */
export declare function addHandler(handler: LogHandler, filter?: {
    tags?: string[];
    maxLevel?: LogLevel;
    messageRegex?: RegExp;
    func?: (logData: LogData) => boolean;
}): LogHandler;
/**
 * Remove a handler.
 *
 * @param handler The handler function to remove.
 */
export declare function removeHandler(handler: LogHandler): void;
/**
 * Remove all handlers.
 */
export declare function removeHandlers(): void;
/**
 * Replace all existing handlers with a new handler.
 *
 * This is a convenience function that can be used to
 * replace the default handler with a new one which logs
 * to the console.
 */
export declare function replaceHandlers(handler: LogHandler): void;
/**
 * Default log event handler.
 *
 * Prints the event data to stderr:
 *
 * - with cutesy emoji, colours and stack (for errors) if stderr is TTY (for human consumption)
 * - as JSON if stderr is not TTY (for machine consumption e.g. log files)
 *
 * If in Node.js, and the
 *
 * @param data The log data to handle
 * @param options.maxLevel The maximum log level to print. Defaults to `info`.
 * @param options.showStack Whether or not to show any stack traces for errors. Defaults to `false`.
 * @param options.exitOnError Whether or not to exit the process on the first error. Defaults to `true`.
 * @param options.throttle.signature The log event signature to use for throttling. Defaults to '' (i.e. all events)
 * @param options.throttle.duration The duration for throttling (milliseconds). Defaults to 1000ms
 */
export declare function defaultHandler(data: LogData, options?: {
    maxLevel?: LogLevel;
    showStack?: boolean;
    exitOnError?: boolean;
    throttle?: {
        signature?: string;
        duration?: number;
    };
}): void;
/**
 * Get a logger for the specific application or package.
 *
 * Each of the returned logger functions are the public interface for
 * posting log messages.
 *
 * @param tag The unique application or package name
 */
export declare function getLogger(tag: string): Logger;
